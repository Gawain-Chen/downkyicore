<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFramework>net6.0</TargetFramework>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <PlatformTarget>x64</PlatformTarget>
        <!--<RuntimeIdentifier>$([System.Runtime.InteropServices.RuntimeInformation]::RuntimeIdentifier)</RuntimeIdentifier>-->
    </PropertyGroup>

    <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
      <Optimize>True</Optimize>
      <DebugType>full</DebugType>
    </PropertyGroup>

    <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
      <DebugType>full</DebugType>
        <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' And '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' And '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)'=='X64'">win-x64</RuntimeIdentifier>
        <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' And '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Windows)))' And '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)'=='X86'">win-x86</RuntimeIdentifier>
        <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' And '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' And '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)'=='Arm64'">linux-arm64</RuntimeIdentifier>
        <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' And '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' And '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)'=='X64'">linux-x64</RuntimeIdentifier>
        <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' And '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' And '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)'=='X64'">osx-x64</RuntimeIdentifier>
        <RuntimeIdentifier Condition="'$(RuntimeIdentifier)' == '' And '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' And '$([System.Runtime.InteropServices.RuntimeInformation]::ProcessArchitecture)'=='Arm64'">osx-arm64</RuntimeIdentifier>
    </PropertyGroup>
    <ItemGroup>
        <PackageReference Include="Avalonia"/>
        <PackageReference Include="FFMpegCore"/>
        <PackageReference Include="Google.Protobuf"/>
        <PackageReference Include="Microsoft.Data.Sqlite.Core"/>
        <PackageReference Include="Newtonsoft.Json"/>
        <PackageReference Include="QRCoder"/>
        <PackageReference Include="SQLitePCLRaw.bundle_e_sqlcipher"/>
    </ItemGroup>
    <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
      <Exec Command="set SOURCE_DIR=.\Binary\win&#xA;set TARGET_DIR=..\DownKyi\bin\$(Configuration)\net6.0&#xA;if not exist &quot;%25TARGET_DIR%25\ffmpeg&quot; mkdir &quot;%25TARGET_DIR%25\ffmpeg&quot;&#xA;if not exist &quot;%25TARGET_DIR%25\aria2&quot; mkdir &quot;%25TARGET_DIR%25\aria2&quot;&#xA;copy &quot;%25SOURCE_DIR%25\ffmpeg\ffmpeg.exe&quot; &quot;%25TARGET_DIR%25\ffmpeg\ffmpeg.exe&quot;&#xA;copy &quot;%25SOURCE_DIR%25\aria2\aria2c.exe&quot; &quot;%25TARGET_DIR%25\aria2\aria2c.exe&quot;" />
    </Target>

    <!--<ItemGroup>
        <None Update="Binary/$(RuntimeIdentifier)/aria2/*" Link="aria2/%(Filename)%(Extension)" Visible="false">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
        <None Update="Binary/$(RuntimeIdentifier)/ffmpeg/*" Link="ffmpeg/%(Filename)%(Extension)" Visible="false">
            <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        </None>
    </ItemGroup>-->

</Project>
